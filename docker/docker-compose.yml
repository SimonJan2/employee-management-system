services:
  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - "8001:8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/employee_management
      - FLASK_APP=app
      - FLASK_ENV=development
      - SECRET_KEY=your-secret-key-here
    volumes:
      - ..:/app
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    ports:
      - "82:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ../app/static:/usr/share/nginx/html/static
    depends_on:
      - web
    networks:
      - app-network
    restart: always

  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=employee_management
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge